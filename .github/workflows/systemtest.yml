name: system-test

on:
    push:
    workflow_dispatch:
#    workflow_call:
#        inputs:
#            buildNewNativeImage:
#                required: true
#                type: boolean
#                default: true
#                description: "If false use last built artifact instead of building a new one. Only for testing the build scripts."

jobs:
    waitForNative:
        uses: ./.github/workflows/buildNative.yml
    build:
        needs: [ waitForNative ]
        #        todo Reenable when it works
        #        if: ${{ github.event.inputs.buildNewNativeImage }}
        runs-on: ubuntu-latest
        steps:
            # Download from previous build for when we don't want to wait for the native image before doing tests
            # Makes only sense when no changes to the code base were made but instead we're trying to get the tests to run
            -   uses: dawidd6/action-download-artifact@v2
                name: Download artifact from previous build
                with:
                    workflow: buildNative.yml
                    name: coreLinux
            -   uses: actions/upload-artifact@v3
                name: Upload linux artifact
                with:
                    name: coreLinux
                    path: core
    prepareContainer:
        needs: [ build ]
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
                name: "Check out source"
            -   name: "Display structure of working directory"
                run: ls .
            -   uses: actions/download-artifact@v3
                name: "Download native artifacts"
                with:
                    path: ~/artifacts
                    name: coreLinux
            -   name: "Display structure of artifacts folder"
                run: ls -laR ~/artifacts
            -   name: "Display structure of current folder"
                run: ls -la .
            -   name: "Copy artifacts to include folders"
                run: |
                    mv ~/artifacts/core ./docker/nativeTest/
                    chmod +x ./docker/nativeTest/core
            -   name: "Login to GitHub Container Registry"
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: "Build core container"
                run: |
                    cp other/wrapper/nzbhydra2wrapperPy3.py ./docker/nativeTest/
                    cd ./docker/nativeTest/
                    docker build -t hydradocker .
                    docker tag hydradocker:latest ghcr.io/theotherp/hydradocker:latest
                    docker push ghcr.io/theotherp/hydradocker:latest
    buildMockserver:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
                name: "Check out source"
            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'adopt'
                    cache: 'maven'
            -   name: "Login to GitHub Container Registry"
                uses: docker/login-action@v2
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
            -   name: "Build and push mockserver container"
                run: |
                    mvn --batch-mode install -DskipTests -T 1C
                    cd other/mockserver/
                    mvn --batch-mode spring-boot:build-image
                    docker tag mockserver:3.0.0 ghcr.io/theotherp/mockserver:3.0.0
                    docker push ghcr.io/theotherp/mockserver:3.0.0

    runTests:
        needs: [ prepareContainer, buildMockserver ]
        runs-on: ubuntu-latest
        env:
            spring_profiles_active: build,systemtest
        services:
            core:
                image: ghcr.io/theotherp/hydradocker:latest
                ports:
                    - 5076:5076
                credentials:
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
                volumes:
                    - /tmp/data:/data
                env:
                    spring_profiles_active: build,systemtest
            mockServer:
                image: ghcr.io/theotherp/mockserver:3.0.0
                ports:
                    - 5080:5080
                credentials:
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
                env:
                    spring_profiles_active: build,systemtest
            sonarr:
                image: lscr.io/linuxserver/sonarr:latest
                ports:
                    - 8989:8989
                credentials:
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
                volumes:
                    - ./docker/sonarr/data/:/config
            radarr:
                image: lscr.io/linuxserver/radarr:latest
                ports:
                    - 8989:8989
                credentials:
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}
                volumes:
                    - ./docker/radarr/data/:/config
        steps:
            -   uses: actions/checkout@v3
                name: "Check out source"

            # Run tests
            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: '17'
                    distribution: 'adopt'
                    cache: 'maven'
            -   name: "Install"
                run: |
                  #                    cd shared
                  #                    mvn --batch-mode install -pl shared
                         mvn --batch-mode install -pl org.nzbhydra:shared,org.nzbhydra:mapping,org.nzbhydra:config
            -   name: "Run tests"
                run: |
                  #                    cd tests/system
                  #                    mvn --batch-mode test
                         mvn --batch-mode test -pl org.nzbhydra.tests:system
            -   name: "Upload data folder artifact"
                uses: actions/upload-artifact@v3
                if: always()
                with:
                    name: data
                    path: /tmp/data
